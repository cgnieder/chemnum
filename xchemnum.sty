% ----------------------------------------------------------------------------
% required packages:
\RequirePackage{expl3,xparse,l3keys2e}
% language support:
\RequirePackage{translations}[2013/07/12]
% greek alphabet for the labels matching to chemmacros' selection:
\RequirePackage{chemgreek}[2013/07/13]

% ----------------------------------------------------------------------------
% provide the package:
\ProvidesExplPackage{xchemnum}{2013/07/13}{0.0}{chemnum revisited (CN)}

% ----------------------------------------------------------------------------
% messages:
\msg_new:nnn { xchemnum } { missing-label }
  { the key `#1' has no label associated \msg_line_context: }

% ----------------------------------------------------------------------------
% variants of kernel functions:
\cs_generate_variant:Nn \prop_gput:Nnn         { Nnx , cnx , cnV }
\cs_generate_variant:Nn \quark_if_no_value:nTF { V }
\cs_generate_variant:Nn \quark_if_no_value:nF  { V }
\cs_generate_variant:Nn \seq_set_split:Nnn     { NV }

% ----------------------------------------------------------------------------
% temporary variables:
\tl_new:N \l__xchemnum_tmpa_tl
\tl_new:N \l__xchemnum_tmpb_tl

\seq_new:N \l__xchemnum_tmpa_seq
\seq_new:N \l__xchemnum_tmpb_seq

% ----------------------------------------------------------------------------
% variables:
\prop_new:N \l__xchemnum_label_formats_prop

\int_new:N \g__xchemnum_main_int

\seq_new:N \g__xchemnum_initiated_compounds_seq

\tl_new:N  \l__xchemnum_label_format_tl
\tl_set:Nn \l__xchemnum_label_format_tl { \bfseries }
\tl_new:N  \l__xchemnum_default_counter_representation_tl
\tl_set:Nn \l__xchemnum_default_counter_representation_tl { arabic }
\tl_new:N  \l__xchemnum_default_subcounter_representation_tl
\tl_set:Nn \l__xchemnum_default_subcounter_representation_tl { alph }
\tl_new:N  \l__xchemnum_pre_counter_default_tl
\tl_new:N  \l__xchemnum_post_counter_default_tl
\tl_new:N  \l__xchemnum_pre_label_default_tl
\tl_new:N  \l__xchemnum_post_label_default_tl
\tl_new:N  \l__xchemnum_main_separator_tl
\tl_set:Nn \l__xchemnum_main_separator_tl { , }
\tl_new:N  \l__xchemnum_compound_separator_tl
\tl_set:Nn \l__xchemnum_compound_separator_tl { . }

% ----------------------------------------------------------------------------
% label formats:

% #1: name
% #2: function with 1 n-type argument that takes an integer
\cs_new_protected:Npn \xchemnum_add_label_format:nN #1#2
  {
    \tl_const:cn { c__xchemnum_#1_label_tl } { #1 }
    \cs_if_exist:cTF { __xchemnum_#1_label_formtat:n }
      { \cs_set:cpn { __xchemnum_#1_label_format:n } ##1 { #2 { ##1 } } }
      { \cs_new:cpn { __xchemnum_#1_label_format:n } ##1 { #2 { ##1 } } }
    \prop_put:Nnx \l__xchemnum_label_formats_prop { #1 }
      { \exp_not:c { __xchemnum_#1_label_format:n } }
  }

\xchemnum_add_label_format:nN { arabic } \int_to_arabic:n
\xchemnum_add_label_format:nN { alph   } \int_to_alph:n
\xchemnum_add_label_format:nN { Alph   } \int_to_Alph:n
\xchemnum_add_label_format:nN { roman  } \int_to_roman:n
\xchemnum_add_label_format:nN { Roman  } \int_to_Roman:n
\xchemnum_add_label_format:nN { greek  } \chemgreek_int_to_greek:n
\xchemnum_add_label_format:nN { Greek  } \chemgreek_int_to_Greek:n

% #1: tl that holds the chosen format
% #2: int expr that holds the value
% this command is expandable
\cs_new:Npn \__xchemnum_label_format:Nn #1#2
  {
    \prop_if_in:NnTF \l__xchemnum_label_formats_prop { #2 }
      { \use:c { __xchemnum_#2_label_format:n } { #1 } }
      {% TODO: error/warning
      }
  }
\cs_generate_variant:Nn \__xchemnum_label_format:Nn { NV , cV }

% ----------------------------------------------------------------------------
% auxiliary file:
\AtBeginDocument
  {
    \file_if_exist:nT { \c_job_name_tl . cmpd }
      { \file_input:n { \c_job_name_tl . cmpd } }
    \iow_new:N   \g_xchemnum_auxfile_iow
    \iow_open:Nn \g_xchemnum_auxfile_iow { ./ \c_job_name_tl . cmpd }
    \iow_now:Nn  \g_xchemnum_auxfile_iow { \makeatletter }
    \iow_now:Nn  \g_xchemnum_auxfile_iow { \providecommand\xchemnum@cmpd[8]{} }
  }

\AtEndDocument {
%   \iow_now:Nn  \g_xchemnum_auxfile_iow { \ExplSyntaxOff }
%   \iow_now:Nn  \g_xchemnum_auxfile_iow { \makeatother }
  \iow_close:N \g_xchemnum_auxfile_iow
}

% ----------------------------------------------------------------------------
% initiating new compounds
% - property list that holds
%   - ID
%   - counter value
%   - counter represetation
%   - pre-counter-code
%   - post-counter-code
%   - pre-label-code
%   - post-label-code
%   - formatting code
% - counter for sublabels
% - add to list of initiated compounds



% #1: ID
\cs_new_protected:Npn \xchemnum_initiate_compound:n #1
  {
    \prop_if_exist:cF { g__xchemnum_compound_#1_prop }
      { \prop_new:c { g__xchemnum_compound_#1_prop } }
    \seq_gput_right:Nn \g__xchemnum_initiated_compounds_seq { #1 }
    \int_gincr:N \g__xchemnum_main_int
    \prop_gput:cnn { g__xchemnum_compound_#1_prop } { ID } { #1 }
    \prop_gput:cnx { g__xchemnum_compound_#1_prop } { counter-value }
      { \int_use:N \g__xchemnum_main_int }
    \prop_gput:cnx { g__xchemnum_compound_#1_prop } { counter-representation }
      {
        \__xchemnum_label_format:NV
          \g__xchemnum_main_int
          \l__xchemnum_default_counter_representation_tl
      }
    \prop_gput:cnV { g__xchemnum_compound_#1_prop } { pre-counter-code  }
      \l__xchemnum_pre_counter_default_tl
    \prop_gput:cnV { g__xchemnum_compound_#1_prop } { post-counter-code }
      \l__xchemnum_post_counter_default_tl
    \prop_gput:cnV { g__xchemnum_compound_#1_prop } { pre-label-code    }
      \l__xchemnum_pre_label_default_tl
    \prop_gput:cnV { g__xchemnum_compound_#1_prop } { post-label-code   }
      \l__xchemnum_post_label_default_tl
    \prop_gput:cnV { g__xchemnum_compound_#1_prop } { label-format }
      \l__xchemnum_label_format_tl
    \__xchemnum_write_to_auxfile:nnnVVVVV { #1 }
      { \int_use:N \g__xchemnum_main_int }
      {
        \__xchemnum_label_format:NV
          \g__xchemnum_main_int
          \l__xchemnum_default_counter_representation_tl
      }
      \l__xchemnum_pre_counter_default_tl
      \l__xchemnum_post_counter_default_tl
      \l__xchemnum_pre_label_default_tl
      \l__xchemnum_post_label_default_tl
      \l__xchemnum_label_format_tl
    \xchemnum_compound_update_property:nn { #1 } { counter-value }
    \xchemnum_compound_update_property:nn { #1 } { counter-representation }
    \xchemnum_compound_update_property:nn { #1 } { pre-counter-code }
    \xchemnum_compound_update_property:nn { #1 } { post-counter-code }
    \xchemnum_compound_update_property:nn { #1 } { pre-label-code }
    \xchemnum_compound_update_property:nn { #1 } { post-label-code }
    \xchemnum_compound_update_property:nn { #1 } { label-format }
  }

% #1: ID
\prg_new_protected_conditional:Npnn \xchemnum_compound_if_initiated:n #1
  { T,F,TF }
  {
    \seq_if_in:NnTF \g__xchemnum_initiated_compounds_seq { #1 }
      { \prg_return_true: }
      { \prg_return_false: }
  }

% #1: ID
% #2: property to be updated
\cs_new_protected:Npn \xchemnum_compound_update_property:nn #1#2
  {
    \prop_get:cnN { g__xchemnum_compound_#1_prop } { previous-#2 }
      \l__xchemnum_tmpa_tl
    \prop_get:cnN { g__xchemnum_compound_#1_prop } { #2 }
      \l__xchemnum_tmpb_tl
    \tl_if_eq:NNF \l__xchemnum_tmpb_tl \l__xchemnum_tmpa_tl
      {
        \prop_gput:cnV { g__xchemnum_compound_#1_prop }
          { previous-#2 }
          \l__xchemnum_tmpb_tl
      }
  }

% #1: ID
% #2: property
\cs_new_protected:Npn \xchemnum_get_compound_property:nn #1#2
  { \xchemnum_get_compound_property_or:nnn { #1 } { #2 } { } }

\cs_new_protected:Npn \xchemnum_get_compound_property_or:nnn #1#2#3
  {
    \prop_get:cnNTF { g__xchemnum_compound_#1_prop } { #2 }
      \l__xchemnum_tmpa_tl
      { \tl_use:N \l__xchemnum_tmpa_tl }
      { #3 }
  }

% ----------------------------------------------------------------------------
% initiating subcompounds:

% #1: main ID
% #2: sub ID
\cs_new_protected:Npn \xchemnum_initiate_subcompound:nn #1#2
  {
    \int_if_exist:cF { g__xchemnum_compound_#1_subcompound_int }
      { \int_new:c { g__xchemnum_compound_#1_subcompound_int } }
    \int_gincr:c { g__xchemnum_compound_#1_subcompound_int }
    \seq_if_exist:cF { g__xchemnum_compound_#1_subcompounds_seq }
      { \seq_new:c { g__xchemnum_compound_#1_subcompounds_seq } }
    \prop_if_exist:cF { g__xchemnum_compound_#1_subcompounds_prop }
      { \seq_new:c { g__xchemnum_compound_#1_subcompounds_prop } }
    \seq_gput_right:cn { g__xchemnum_compound_#1_subcompounds_seq } { #2 }
    \prop_gput:cnx { g__xchemnum_compound_#1_subcompounds_prop } { #2 }
      {
        \int_use:c { g__xchemnum_compound_#1_subcompound_int } :
        \__xchemnum_label_format:cV
          { g__xchemnum_compound_#1_subcompound_int }
          \l__xchemnum_default_subcounter_representation_tl
      }
  }

% ----------------------------------------------------------------------------

% saving compounds to the auxilliary file:
% #1: ID
% #2: counter value
% #3: counter representation
% #4: pre counter
% #5: post counter
% #6: pre label
% #7: post label
% #8: label format
\cs_new_protected:Npn \__xchemnum_write_to_auxfile:nnnnnnnn #1#2#3#4#5#6#7#8
  {
    \iow_now:Nx  \g_xchemnum_auxfile_iow
      {
        \exp_not:N \xchemnum@cmpd{#1}{#2}{#3}
        \exp_not:n { {#4}{#5}{#6}{#7}{#8} }
      }
  }
\cs_generate_variant:Nn \__xchemnum_write_to_auxfile:nnnnnnnn { nnnVVVVV }

% #1: ID
% #2: counter value
% #3: counter representation
\cs_new_protected:Npn \xchemnum@cmpd #1#2#3#4#5#6#7#8
  {
    \prop_if_exist:cF { g__xchemnum_compound_#1_prop }
      { \prop_new:c { g__xchemnum_compound_#1_prop } }
    \prop_gput:cnn { g__xchemnum_compound_#1_prop }
      { previous-counter-value } { #2 }
    \prop_gput:cnn { g__xchemnum_compound_#1_prop }
      { previous-counter-representation } { #3 }
  }

% ----------------------------------------------------------------------------
% declaring and writing compounds:

% #1: options
% #2: ID
\cs_new_protected:Npn \xchemnum_declare_compound:nn #1#2
  {% TODO: we need to test if a compound /has/ to be initiated!
    \xchemnum_compound_if_initiated:nF { #2 }
      { \xchemnum_initiate_compound:n { #2 } }
  }

% actively write a compound:
% #1: ID
\cs_new_protected:Npn \xchemnum_compound_write:n #1
  {
    \group_begin:
      \xchemnum_get_compound_property:nn { #1 } { label-format }
      \xchemnum_get_compound_property:nn { #1 } { pre-label-code    }
      \xchemnum_get_compound_property:nn { #1 } { pre-counter-code  }
      \xchemnum_get_compound_property:nn { #1 } { counter-representation }
      \xchemnum_get_compound_property:nn { #1 } { post-counter-code }
      \xchemnum_get_compound_property:nn { #1 } { post-label-code   }
    \group_end:
  }

% read and write saved values:
% #1: ID
\cs_new_protected:Npn \xchemnum_compound_read:n #1
  {
    \group_begin:
      \xchemnum_get_compound_property_or:nnn { #1 }
        { previous-label-format } { }
      \xchemnum_get_compound_property_or:nnn { #1 }
        { previous-pre-label-code } { }
      \xchemnum_get_compound_property_or:nnn { #1 }
        { previous-pre-counter-code } { }
      \xchemnum_get_compound_property_or:nnn { #1 }
        { previous-counter-representation } { ?? }
      \xchemnum_get_compound_property_or:nnn { #1 }
        { previous-post-counter-code } { }
      \xchemnum_get_compound_property_or:nnn { #1 }
        { previous-post-label-code   } { }
    \group_end:
  }

% write a label from the entries of \cmpd:
% #1: boolean: if true register compound but don't write the label
% #2: boolean: if true only read compound
% #3: options
% #4: label specifications
\cs_new_protected:Npn \xchemnum_single_compound:nnnn #1#2#3#4
  {
    \bool_if:NT #1 { \@bsphack }
    \xchemnum_split_sub_from_main:Vnnnn
      \l__xchemnum_compound_separator_tl
      { #1 } { #2 } { #3 } { #4 }
    \bool_if:NT { #1 } { \@esphack }
  }

% #1: label separator
% #2: boolean: if true register compound but don't write the label
% #3: boolean: if true only read compound
% #4: options
% #5: label spec
\cs_new_protected:Npn \xchemnum_split_sub_from_main:nnnnn #1#2#3#4#5
  {
    \cs_set:Npn \__xchemnum_split_sub_from_main_aux:nnnw ##1##2##3##4#1##5#1##6 \q_stop
      {
        \xchemnum_write_main:nnnn { ##1 } { ##2 } { ##3 } { ##4 }
        \tl_if_blank:nF { ##5 }
          {% TODO: write sub
          }
      }
    \__xchemnum_split_sub_from_main_aux:nnnw { #2 } { #3 } { #4 } #5#1#1 \q_stop
  }
\cs_generate_variant:Nn \xchemnum_split_sub_from_main:nnnnn { V }

\cs_new:Npn \__xchemnum_split_sub_from_main_aux:nnnw #1#2#3#4.#5.#6 \q_stop {}

% \xchemnum_write_main:nnnn will write the main label, either with saved
% values (+ variant, boolean #2=true), or only register it (* variant, boolean
% #1=true)
% 
% #1: boolean: if true register compound but don't write the label
% #2: boolean: if true only read compound
% #3: options
% #4: label spec
\cs_new_protected:Npn \xchemnum_write_main:nnnn #1#2#3#4
  {
    \bool_if:NTF #2
      { \xchemnum_compound_read:n { #4 } }
      {
        \bool_if:NTF { #1 }
          { %TODO error/warning: wrong argument combination
          }
          {
            \xchemnum_declare_compound:nn { #3 } { #4 }
            \xchemnum_compound_write:n { #4 }
          }
      }
  }

% the code level version of the main command:
% #1: boolean: if true register compound but don't write the label
% #2: boolean: if true only read compound
% #3: options
% #4: list of IDs
\cs_new_protected:Npn \xchemnum_cmpd:nnnn #1#2#3#4
  {
    \seq_set_split:NVn
      \l__xchemnum_tmpa_seq
      \l__xchemnum_main_separator_tl
      { #4 }
    \seq_remove_duplicates:N \l__xchemnum_tmpa_seq
    \seq_clear:N \l__xchemnum_tmpb_seq
    \seq_map_inline:Nn \l__xchemnum_tmpa_seq
      {
        % TODO:
        % this will have to map to a function that recognizes sublabels:
        \seq_put_right:Nn \l__xchemnum_tmpb_seq
          { \xchemnum_single_compound:nnnn { #1 } { #2 } { #3 } { ##1 } }
      }
    \seq_use:Nnnn \l__xchemnum_tmpb_seq
      { \GetTranslation { xchemnum-sep-two } }
      { \GetTranslation { xchemnum-sep-more } }
      { \GetTranslation { xchemnum-sep-last-two } }
  }

% the user level version of the main command:
\NewDocumentCommand \cmpd { st+O{}m  }
  { \xchemnum_cmpd:nnnn { #1 } { #2 } { #3 } { #4 } }

% ----------------------------------------------------------------------------
% language support:
\DeclareTranslationFallback      {xchemnum-sep-two} {~and~}
\DeclareTranslation {English}    {xchemnum-sep-two} {~and~}
\DeclareTranslation {German}     {xchemnum-sep-two} {~und~}
\DeclareTranslation {French}     {xchemnum-sep-two} {~et~}
\DeclareTranslation {Spanish}    {xchemnum-sep-two} {~y~}
\DeclareTranslation {Italian}    {xchemnum-sep-two} {~e~}
\DeclareTranslation {Catalan}    {xchemnum-sep-two} {~i~}
\DeclareTranslation {Portuguese} {xchemnum-sep-two} {~e~}
\DeclareTranslation {Dutch}      {xchemnum-sep-two} {~en~}
\DeclareTranslation {Danish}     {xchemnum-sep-two} {~og~}
\DeclareTranslation {Swedish}    {xchemnum-sep-two} {~och~}
\DeclareTranslation {Finnish}    {xchemnum-sep-two} {~ja~}
\DeclareTranslation {Norwegian}  {xchemnum-sep-two} {~og~}

\DeclareTranslationFallback      {xchemnum-sep-more} {,~}
\DeclareTranslation {English}    {xchemnum-sep-more} {,~}
\DeclareTranslation {German}     {xchemnum-sep-more} {,~}
\DeclareTranslation {French}     {xchemnum-sep-more} {,~}
\DeclareTranslation {Spanish}    {xchemnum-sep-more} {,~}
\DeclareTranslation {Italian}    {xchemnum-sep-more} {,~}
\DeclareTranslation {Catalan}    {xchemnum-sep-more} {,~}
\DeclareTranslation {Portuguese} {xchemnum-sep-more} {,~}
\DeclareTranslation {Dutch}      {xchemnum-sep-more} {,~}
\DeclareTranslation {Danish}     {xchemnum-sep-more} {,~}
\DeclareTranslation {Swedish}    {xchemnum-sep-more} {,~}
\DeclareTranslation {Finnish}    {xchemnum-sep-more} {,~}
\DeclareTranslation {Norwegian}  {xchemnum-sep-more} {,~}

\DeclareTranslationFallback      {xchemnum-sep-last-two} {,~and~}
\DeclareTranslation {English}    {xchemnum-sep-last-two} {~and~}
\DeclareTranslation {American}   {xchemnum-sep-last-two} {,~and~}
\DeclareTranslation {German}     {xchemnum-sep-last-two} {~und~}
\DeclareTranslation {French}     {xchemnum-sep-last-two} {~et~}
\DeclareTranslation {Spanish}    {xchemnum-sep-last-two} {~y~}
\DeclareTranslation {Italian}    {xchemnum-sep-last-two} {~e~}
\DeclareTranslation {Catalan}    {xchemnum-sep-last-two} {~i~}
\DeclareTranslation {Portuguese} {xchemnum-sep-last-two} {~e~}
\DeclareTranslation {Dutch}      {xchemnum-sep-last-two} {~en~}
\DeclareTranslation {Danish}     {xchemnum-sep-last-two} {~og~}
\DeclareTranslation {Swedish}    {xchemnum-sep-last-two} {~och~}
\DeclareTranslation {Finnish}    {xchemnum-sep-last-two} {~ja~}
\DeclareTranslation {Norwegian}  {xchemnum-sep-last-two} {~og~}

\tex_endinput:D
% ----------------------------------------------------------------------------
% TODO:
- add sublabel facilities
- add options
  - local to \cmpd
  - general default settings
- sorting facilities

